{
  "users": [
    {
      "id": 1,
      "user": "admin@admin.com",
      "password": "admin"
    }
  ],
  "subjects": [
    {
      "id": 1,
      "name": "Algorithm",
      "key": "algo"
    }
  ],
  "categories": {
    "algo": [
      {
        "id": "1",
        "name": "String",
        "key": "str"
      },
      {
        "id": "1",
        "name": "Array",
        "key": "arr"
      },
      {
        "id": "1",
        "name": "Object",
        "key": "obj"
      },
      {
        "id": "1",
        "name": "Search",
        "key": "search"
      },
      {
        "id": "1",
        "name": "Sorting",
        "key": "sort"
      },
      {
        "id": "1",
        "name": "Greedy",
        "key": "greed"
      },
      {
        "id": "1",
        "name": "Tree",
        "key": "tree"
      }
    ]
  },
  "algo": [
    {
      "subject": "algo",
      "ques": "First non repeating character in a string",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=U7rxgP-fp8E"
        }
      ],
      "tags": [
        {
          "name": "geekforgeek"
        },
        {
          "name": "notImp"
        }
      ],
      "ans": "\nconst firstNonRepeat = (str) => {\n   let strMap = {};\n   for(let i = 0; i < str.length; i++){\n       let char = str[i];\n       if(char in strMap){\n           delete strMap[char];\n       } else {\n           strMap[char] = 1;\n       }\n   }\n   return Object.keys(strMap)[0];\n }\n \n const st = \"ADBCGHIEFKJLADTVDERFSWVGHQWCNOPENSMSJWIERTFB\";\n \n console.log(firstNonRepeat(st));",
      "diff": 2,
      "imp": 2,
      "cate": "str",
      "id": 5
    },
    {
      "subject": "algo",
      "ques": "Anagram Pattern Search",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=h4MCwdfZZas"
        },
        {
          "name": "https://www.geeksforgeeks.org/anagram-substring-search-search-permutations/"
        }
      ],
      "ans": "const anyAnagram = (txt, pattern) => {\n       // create map for pattern\n       let pattMap = {};\n       for(let i=0; i<pattern.length; i++){\n           let ch = pattern[i];\n           pattMap[ch] = (ch in pattMap) ? ++pattMap[ch] : 1;\n       }\n \n       // method to compare two maps\n       const compareMap = (m1, m2) => {\n           // console.log(\"compareMap :: m1 : m2 ::::\", m1, \"::\", m2)\n           let keys1 = Object.keys(m1);\n           let keys2 = Object.keys(m2);\n           if(keys1.length != keys2.length){\n               return false;\n           }\n \n           for(let k of keys1){\n               if(m1[k] !== m2[k]){\n               return false;\n               }\n           }\n           return true;\n       }\n \n       let txtMap = {};\n       let insertCount = 0;\n       let firstCharIdx = 0;\n      \n       for(let i=0; i< txt.length; i++){\n           let ch = txt[i];\n           // text map\n           txtMap[ch] = (ch in txtMap) ? ++txtMap[ch] : 1;\n           ++insertCount;\n \n           // If insertion in map == pattern length\n           if(insertCount == pattern.length){\n               // compare map\n               let result = compareMap(pattMap, txtMap);\n               if(result){\n                   return \"Present\";\n               } else {\n                   // remove first ch\n                   let firstChar = txt[firstCharIdx];\n                   if(txtMap[firstChar] == 1){\n                       delete txtMap[firstChar];\n                   } else {\n                       txtMap[firstChar] = txtMap[firstChar] - 1;\n                   }\n                   // reduce insertion count\n                   insertCount = insertCount - 1;\n                   // increase firsr char index\n                   firstCharIdx = firstCharIdx + 1;\n               }\n           }\n       }\n       return \"Not Present\"\n   }\n \n   let Text = \"ideserve\";\n   let Pattern = \"veer\";\n \n   console.log(anyAnagram(Text, Pattern));",
      "diff": 1,
      "cate": "str",
      "id": 6
    }
  ]
}